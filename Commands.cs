using System;
using System.Collections.Generic;
using System.Data.SQLite;
using System.Linq;
using System.Threading.Tasks;
using DSharpPlus.CommandsNext;
using DSharpPlus.CommandsNext.Attributes;
using DSharpPlus.Entities;
using LiteDB;
using Serilog;
using VoiceOnlineBot;

namespace VoiceOnlineBot
{
	public class Commands
	{
		[Command("giveitem"), Aliases("–ø–µ—Ä–µ–¥–∞—Ç—å")]
		public async Task GiveItem(CommandContext ctx, uint transactionValue = 1, [Description("–∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞")]string transactionItem = default, [Description("—Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")]DiscordMember targetUser = default)
		{
			var embed = new DiscordEmbedBuilder
			{
				Author = new DiscordEmbedBuilder.EmbedAuthor
				{
					Name = "‚ô≤ –ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
				},
				Color = new DiscordColor("#321272")
			};
			try
			{
				await ctx.TriggerTypingAsync();
				if (string.IsNullOrEmpty(transactionItem))
				{
					throw new ArgumentNullException($"–ù–µ–∫–æ—Ä—Ä–µ—Ç–Ω–æ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç [{ctx.Command.Arguments[1].Description}]");
				}
				if (targetUser == null)
				{
					throw new ArgumentNullException($"–ù–µ–∫–æ—Ä—Ä–µ—Ç–Ω–æ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç [{ctx.Command.Arguments[2].Description}]");
				}

				using (var db = new LiteDatabase($"filename={Bot.botConfig.GuildID}_voiceStat.db; journal=false;"))
				{
					var col = db.GetCollection<UserModel>("Users");
					var sender = col.FindOne(x => x.Id == ctx.Member.Id);
					var dbUser = col.FindOne(x => x.Id == targetUser.Id);
					if (sender == null)
						throw new ArgumentException("–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ");
					if (dbUser == null)
						throw new ArgumentException($"{targetUser.Username} –Ω–µ –Ω–∞–π–¥–µ–Ω(–∞) –≤ –±–∞–∑–µ");
					switch (transactionItem)
					{
						case "—è–π—Ü–æ":
							if (sender.DragonEggCount < transactionValue && !Bot.botConfig.OwnerIds.Contains(ctx.User.Id))
								throw new ArgumentException("–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ü•ö");
							dbUser.DragonEggCount += transactionValue;
							sender.DragonEggCount -= transactionValue;
							if (sender.EggRespawnTimes != null)
							{
								for (int j = (int)transactionValue - 1; j >= 0; j--)
								{
									sender.EggRespawnTimes.RemoveAt(j);
								}
							}
							if (dbUser.EggRespawnTimes == null)
								dbUser.EggRespawnTimes = new List<DateTimeOffset>();
							for (int j = 0; j < transactionValue; j++)
							{
								dbUser.EggRespawnTimes.Add(DateTimeOffset.UtcNow.AddHours(18));
							}
							break;
						case "–ø–∞—Ç—Ä–æ–Ω":
							if (sender.AmmoCount < transactionValue && !Bot.botConfig.OwnerIds.Contains(ctx.User.Id))
								throw new ArgumentException($"–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {DiscordEmoji.FromName(ctx.Client, ":bullet:")}");
							dbUser.AmmoCount += transactionValue;
							sender.AmmoCount -= transactionValue;
							break;
						case "–¥—Ä–∞–∫–æ–Ω":
							if (sender.DragonCount < transactionValue && !Bot.botConfig.OwnerIds.Contains(ctx.User.Id))
								throw new ArgumentException("–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üê≤");
							dbUser.DragonCount += transactionValue;
							sender.DragonCount -= transactionValue;
							break;
						case "–∏–Ω–∫—É–±–∞—Ç–æ—Ä":
							if (sender.IncubatorCount < transactionValue && !Bot.botConfig.OwnerIds.Contains(ctx.User.Id))
								throw new ArgumentException($"–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {DiscordEmoji.FromName(ctx.Client, ":incubator: ")}");
							dbUser.IncubatorCount += transactionValue;
							sender.IncubatorCount -= transactionValue;
							if (sender.IncubatorRespawnTimes != null)
							{
								for (int j = (int)transactionValue - 1; j >= 0; j--)
								{
									sender.IncubatorRespawnTimes.RemoveAt(j);
								}
							}
							if (dbUser.IncubatorRespawnTimes == null)
								dbUser.IncubatorRespawnTimes = new List<DateTimeOffset>();
							for (int j = 0; j < transactionValue; j++)
							{
								dbUser.IncubatorRespawnTimes.Add(DateTimeOffset.UtcNow.AddHours(24));
							}
							break;
						case "–∫—Ä–∞—Å–∫–∞":
							if (sender.PaintCount < transactionValue && !Bot.botConfig.OwnerIds.Contains(ctx.User.Id))
								throw new ArgumentException("–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üé®");
							dbUser.PaintCount += transactionValue;
							sender.PaintCount -= transactionValue;
							break;
						case "–ø–∏—Å—Ç–æ–ª–µ—Ç":
							if (sender.PistolCount < transactionValue && !Bot.botConfig.OwnerIds.Contains(ctx.User.Id))
								throw new ArgumentException("–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üî´");
							dbUser.PistolCount += transactionValue;
							sender.PistolCount -= transactionValue;
							break;
						case "–ø–∞–∫":
							if (sender.GiftCount < transactionValue && !Bot.botConfig.OwnerIds.Contains(ctx.User.Id))
								throw new ArgumentException("–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üéÅ");
							dbUser.GiftCount += transactionValue;
							sender.GiftCount -= transactionValue;
							break;
						default:
							throw new ArgumentException("–î–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å");
					}
					col.Update(dbUser);
					if (!Bot.botConfig.OwnerIds.Contains(ctx.User.Id))
					{
						col.Update(sender);
					}
					embed.Description = $"{targetUser.Mention} –í—ã –ø–æ–ª—É—á–∏–ª–∏ {transactionValue} {transactionItem} –æ—Ç {ctx.User.Mention}";
					await ctx.RespondAsync(embed: embed);
				}
			}
			catch (ArgumentException ex)
			{
				embed.Description = $"{ctx.User.Mention} {ex.Message}";
				await ctx.RespondAsync(embed: embed);
			}
			catch (Exception ex)
			{
				Log.Error(ex.ToString());
			}
		}

		[Command("–Ω–∞–≥—Ä–∞–¥–∞"), Aliases("timely")]
		public async Task Timely(CommandContext ctx)
		{
			var embed = new DiscordEmbedBuilder
			{
				Author = new DiscordEmbedBuilder.EmbedAuthor
				{
					Name = "üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞"
				},
				Color = new DiscordColor("#321272")
			};
			try
			{
				await ctx.TriggerTypingAsync();
				using (var db = new LiteDatabase($"filename={Bot.botConfig.GuildID}_voiceStat.db; journal=false;"))
				{
					var dbUsers = db.GetCollection<UserModel>("Users");
					var dbUser = dbUsers.FindOne(x => x.Id == ctx.User.Id);
					if (dbUser == null)
						throw new ArgumentException("–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ");

					if (dbUser.VoiceOnlineTime.TotalHours > 2)
					{
						if (dbUser.LastPackUsedTime == null || (DateTimeOffset.UtcNow - dbUser.LastPackUsedTime).Value.TotalSeconds > 24 * 60 * 60)
						{
							dbUser.GiftCount += 1;
							dbUser.LastPackUsedTime = DateTimeOffset.UtcNow;
							dbUsers.Update(dbUser);
							embed.Description = $"{ctx.User.Mention} –í—ã –∑–∞–±—Ä–∞–ª–∏ 1 –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π üéÅ. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–ª.-–≤–æ üéÅ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É !me";
						}
						else
						{
							var nextPackTime = dbUser.LastPackUsedTime.Value.AddSeconds(24 * 60 * 60) - DateTimeOffset.UtcNow;
							embed.Description = $"{ctx.User.Mention} –í—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –Ω–∞–≥—Ä–∞–¥—É —á–µ—Ä–µ–∑ {nextPackTime.Hours} —á. {nextPackTime.Minutes} –º–∏–Ω.";
						}
					}
					else embed.Description = $"{ctx.User.Mention} –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å —Ö–æ—Ç—è –±—ã 2 —á–∞—Å–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–Ω–ª–∞–π–Ω–∞.\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è —Å–≤–æ–µ–≥–æ –≥–æ–ª–æ—Å. –æ–Ω–ª–∞–π–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É !–º–æ–π–æ–Ω–ª–∞–π–Ω";
				}
				await ctx.RespondAsync(embed: embed);
			}
			catch (ArgumentException ex)
			{
				embed.Description = $"{ctx.Member.Mention} {ex.Message}";
				await ctx.RespondAsync(embed: embed);
			}
			catch (Exception ex)
			{
				Log.Error($"Exception occured: {ex.GetType()}: {ex.Message} {ex.StackTrace}");
			}
			return;
		}

		[Command("me"), Aliases("—è")]
		public async Task Inventory(CommandContext ctx, DiscordMember targetUser = default)
		{
			var embed = new DiscordEmbedBuilder
			{
				Author = new DiscordEmbedBuilder.EmbedAuthor
				{
					Name = "üë§ –ü—Ä–æ—Ñ–∏–ª—å"
				},
				Color = new DiscordColor("#321272")
			};
			try
			{
				await ctx.TriggerTypingAsync();
				if (targetUser == null)
					targetUser = ctx.Member;
				using (var db = new LiteDatabase($"filename={Bot.botConfig.GuildID}_voiceStat.db; journal=false;"))
				{
					var dbUsers = db.GetCollection<UserModel>("Users");
					var dbUser = dbUsers.FindOne(x => x.Id == targetUser.Id);
					if (dbUser == null)
					{
						if (targetUser.Id == ctx.Member.Id)
							throw new ArgumentException("–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ");
						else throw new ArgumentException($"{targetUser.Username} –Ω–µ –Ω–∞–π–¥–µ–Ω(–∞) –≤ –±–∞–∑–µ");
					}

					string closestEggRespawn = dbUser.EggRespawnTimes != null && dbUser.EggRespawnTimes.Count > 0 ? $" (–æ—Å—Ç. {(dbUser.EggRespawnTimes[0] - DateTimeOffset.UtcNow).Hours}—á. {(dbUser.EggRespawnTimes[0] - DateTimeOffset.UtcNow).Minutes} –º–∏–Ω. {(dbUser.EggRespawnTimes[0] - DateTimeOffset.UtcNow).Seconds} —Å–µ–∫.)" : default;
					string closestIncubatorRespawn = dbUser.IncubatorRespawnTimes != null && dbUser.IncubatorRespawnTimes.Count > 0 ? $" (–æ—Å—Ç. {(dbUser.IncubatorRespawnTimes[0] - DateTimeOffset.UtcNow).Hours}—á. {(dbUser.IncubatorRespawnTimes[0] - DateTimeOffset.UtcNow).Minutes} –º–∏–Ω. {(dbUser.IncubatorRespawnTimes[0] - DateTimeOffset.UtcNow).Seconds} —Å–µ–∫.)" : default;
					var smallShieldText = "–Ω–µ—Ç";
					if (dbUser.SmallShieldEndTime != null)
					{
						var smallShieldTime = dbUser.SmallShieldEndTime.Value - DateTimeOffset.UtcNow;
						if (smallShieldTime.TotalSeconds <= 0)
						{
							dbUser.SmallShieldEndTime = null;
							dbUsers.Update(dbUser);
						}
						else smallShieldText = $"–æ—Å—Ç. {smallShieldTime.Days} –¥. {smallShieldTime.Hours} —á. {smallShieldTime.Minutes} –º–∏–Ω.";
					}
					var supperShieldText = dbUser.SuperShieldEndurance > 0 ? $"–ø—Ä–æ—á–Ω–æ—Å—Ç—å {dbUser.SuperShieldEndurance}" : "–Ω–µ—Ç";
					var marriageText = "–æ–¥–∏–Ω–æ–∫(–∞)";
					if (dbUser.PartnerId != 0)
					{
						var partner = ctx.Guild.Members.FirstOrDefault(x => x.Id == dbUser.PartnerId);
						var partnerName = partner != null ? partner.Username : dbUser.PartnerId.ToString();
						if (dbUser.MarriageTime != null)
						{
							if ((dbUser.MarriageTime.Value - DateTimeOffset.UtcNow).TotalSeconds < 1)
							{
								dbUser.MarriageTime = default;
								var partnerDb = dbUsers.FindOne(x => x.Id == dbUser.PartnerId);
								partnerDb.MarriageTime = default;
								marriageText = $"–æ–±—Ä—É—á–µ–Ω(–∞) c {partnerName}";
								dbUsers.Update(dbUser);
								dbUsers.Update(partnerDb);
							}
							else marriageText = $"–±—Ä–∞–∫–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {(dbUser.MarriageTime.Value - DateTimeOffset.UtcNow).Days} –¥. {(dbUser.MarriageTime.Value - DateTimeOffset.UtcNow).Hours} —á. {(dbUser.MarriageTime.Value - DateTimeOffset.UtcNow).Minutes} –º–∏–Ω. {(dbUser.MarriageTime.Value - DateTimeOffset.UtcNow).Seconds} —Å–µ–∫.";
						}
						else
							marriageText = $"–æ–±—Ä—É—á–µ–Ω(–∞) c {partnerName}";
					}
					var keys = await NadekoDbExtension.GetCurrencyValue(targetUser.Id);
					embed.Description = $"{targetUser.Mention}\n"
						+ $"–°–µ–º–µ–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {marriageText}\n"
						+ "–ë–æ–µ–≤–æ–π —Å—Ç–∞—Ç—É—Å: –Ω–æ–≤–∏—á–æ–∫";
					embed.AddField("üõ° –ú–∞–ª—ã–π —â–∏—Ç", smallShieldText, true);
					embed.AddField("üõ° –ë–æ–µ–≤–æ–π —â–∏—Ç", supperShieldText, true);
					embed.AddField("üéÅ –ü–∞–∫–∏", dbUser.GiftCount.ToString(), true);
					embed.AddField("ü•ö –Ø–π—Ü–∞", dbUser.DragonEggCount + closestEggRespawn, true);
					embed.AddField($"{DiscordEmoji.FromName(ctx.Client, ":incubator:")} –ò–Ω–∫—É–±–∞—Ç–æ—Ä—ã", dbUser.IncubatorCount + closestIncubatorRespawn, true);
					embed.AddField("üê≤ –î—Ä–∞–∫–æ–Ω—ã", dbUser.DragonCount.ToString(), true);
					embed.AddField("üî´ –ü–∏—Å—Ç–æ–ª–µ—Ç—ã", dbUser.PistolCount.ToString(), true);
					embed.AddField("üé® –ö—Ä–∞—Å–∫–∏", dbUser.PaintCount.ToString(), true);
					embed.AddField($"{DiscordEmoji.FromName(ctx.Client, ":bullet:")} –ü–∞—Ç—Ä–æ–Ω—ã", dbUser.AmmoCount.ToString(), true);
					embed.AddField("–£–¥–∞—á–Ω—ã—Ö –ø–æ—Ö–æ–¥–æ–≤", "–î–∞–Ω–∂ #1: 0\n"
						+ "–î–∞–Ω–∂ #2: 0\n"
						+ "–î–∞–Ω–∂ #3: 0\n"
						+ "–î–∞–Ω–∂ #4: 0\n"
						+ "–î–∞–Ω–∂ #5: 0\n", true);
					embed.AddField("–í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–±–ª–µ–Ω–æ", "0", true);
					embed.AddField("üîë –ö–ª—é—á–∏", keys.ToString(), true);
					embed.AddField("üíç –ö–æ–ª—å—Ü–∞", dbUser.RingCount.ToString(), true);
					embed.AddField("–ò–Ω—Ñ–æ", "–ß—Ç–æ–±—ã —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å üéÅ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É !—Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å", false);
				}
				await ctx.RespondAsync(embed: embed);
			}
			catch (ArgumentException ex)
			{
				embed.Description = $"{ctx.Member.Mention} {ex.Message}";
				await ctx.RespondAsync(embed: embed);
			}
			catch (Exception ex)
			{
				Log.Error(ex.ToString());
			}
			return;
		}

		// [Command("test")]
		// public async Task Test(CommandContext ctx, uint value = default, string item = default, DiscordMember targtUser = null)
		// {
		// 	await ctx.TriggerTypingAsync();
		// 	var embed = new DiscordEmbedBuilder
		// 	{
		// 		Author = new DiscordEmbedBuilder.EmbedAuthor
		// 		{
		// 			Name = "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"
		// 		},
		// 		Description = $"{ctx.User.Mention}, –£ –≤–∞—Å {NadekoDbExtension.GetCurrencyValue(ctx.User.Id)} üîë",
		// 		Color = new DiscordColor("#321272"),
		// 		Footer = new DiscordEmbedBuilder.EmbedFooter
		// 		{
		// 			Text = "http://194.67.207.194",
		// 		}
		// 	};
		// 	await ctx.RespondAsync(embed: embed);
		// }

		[Command("—Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å"), Aliases("unpack")]
		public async Task Unpack(CommandContext ctx, uint unpackCount = 1)
		{
			var embed = new DiscordEmbedBuilder
			{
				Author = new DiscordEmbedBuilder.EmbedAuthor
				{
					Name = "üéÅ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞"
				},
				Color = new DiscordColor("#321272")
			};
			try
			{
				await ctx.TriggerTypingAsync();
				if (unpackCount <= 0)
					throw new ArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç");
				using (var db = new LiteDatabase($"filename={Bot.botConfig.GuildID}_voiceStat.db; journal=false;"))
				{
					var dbUsers = db.GetCollection<UserModel>("Users");
					var dbUser = dbUsers.FindOne(x => x.Id == ctx.User.Id);
					if (dbUser == null)
						throw new ArgumentException("–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ");
					if (dbUser.GiftCount == 0)
						throw new ArgumentException("–£ –≤–∞—Å –Ω–µ—Ç üéÅ.\n–ß—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É !–Ω–∞–≥—Ä–∞–¥–∞");
					if (unpackCount > dbUser.GiftCount)
						throw new ArgumentException("–£ –≤–∞—Å –Ω–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª.-—Ç–≤–∞ üéÅ.\n–ß—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É !–Ω–∞–≥—Ä–∞–¥–∞");
					if (unpackCount == 1)
					{
						dbUser.GiftCount--;
					}
					else if (unpackCount == 10 || unpackCount == 30)
					{
						dbUser.GiftCount -= unpackCount;
					}
					else
						throw new ArgumentException("–†–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ 1, 10 –∏–ª–∏ 30 üéÅ.\n–ß—Ç–æ–±—ã —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å 1 üéÅ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É !—Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !—Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å 10 –∏–ª–∏ !—Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å 30, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—É–ø–µ—Ä-–Ω–∞–≥—Ä–∞–¥—É.");
					var prizeText = "";
					var prizeValue = 0;
					if (unpackCount == 10)
					{
						var chance = Bot.random.Next(0, 100);
						switch (chance)
						{
							case var _ when chance < 10:
								dbUser.AmmoCount += 10;
								prizeText = $"10 {DiscordEmoji.FromName(ctx.Client, ":bullet:")}";
								break;
							case var _ when chance < 20:
								prizeValue = Bot.random.Next(1000, 2000);
								break;
							case var _ when chance < 40:
								prizeText = $"1 üé®";
								dbUser.PaintCount++;
								break;
							default:
								prizeValue = Bot.random.Next(300, 1000);
								break;
						}
					}
					else
					if (unpackCount == 30)
					{
						var chance = Bot.random.Next(0, 100);
						switch (chance)
						{
							case var _ when chance < 10:
								dbUser.PistolCount++;
								prizeText = $"1 üî´";
								break;
							case var _ when chance < 10:
								dbUser.DragonEggCount++;
								if (dbUser.EggRespawnTimes == null)
									dbUser.EggRespawnTimes = new List<DateTimeOffset>();
								dbUser.EggRespawnTimes.Add(DateTimeOffset.UtcNow.AddHours(18));
								prizeText = $"1 ü•ö";
								break;
							case var _ when chance < 40:
								if (ctx.Member.Roles.Contains(Bot.prizeRole))
									throw new ArgumentException($"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å {Bot.prizeRole.Name}, üéÅ –Ω–µ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è");
								await ctx.Guild.GrantRoleAsync(ctx.Member, Bot.prizeRole);
								prizeText = $"—Ä–æ–ª—å {Bot.botConfig.PrizeRoleName}";
								break;
							default:
								prizeValue = Bot.random.Next(1500, 3500);
								break;
						}
					}
					else
					{
						var chance = Bot.random.Next(0, 100);
						switch (chance)
						{
							case var _ when chance < 10:
								prizeValue = Bot.random.Next(120, 180);
								break;
							case var _ when chance < 40:
								prizeValue = Bot.random.Next(80, 120);
								break;
							default:
								prizeValue = Bot.random.Next(10, 80);
								break;
						}
					}
					if (prizeValue != 0)
					{
						prizeText = $"{prizeValue} üîë";
						await NadekoDbExtension.SetCurrencyValue(ctx.User.Id, prizeValue);
					}
					dbUsers.Update(dbUser);
					embed.Description = $"{ctx.User.Mention} –í—ã —Ä–∞—Å–ø–∞–∫–æ–≤–∞–ª–∏ üéÅ –∏ –ø–æ–ª—É—á–∏–ª–∏ {prizeText}";
					await ctx.RespondAsync(embed: embed);
				}
			}
			catch (ArgumentException ex)
			{
				embed.Description = $"{ctx.Member.Mention} {ex.Message}";
				await ctx.RespondAsync(embed: embed);
			}
			catch (Exception ex)
			{
				Log.Error(ex.ToString());
			}
			return;
		}

		[Command("rolecolor"), Aliases("—Ü–≤–µ—Ç—Ä–æ–ª–∏")]
		public async Task RoleColorAsync(CommandContext ctx, string colorCode = default, [Description("—Ü–µ–ª–µ–≤–∞—è —Ä–æ–ª—å")]DiscordRole targetRole = default)
		{
			var embed = new DiscordEmbedBuilder
			{
				Author = new DiscordEmbedBuilder.EmbedAuthor
				{
					Name = "üé® –¶–≤–µ—Ç —Ä–æ–ª–∏"
				},
				Color = new DiscordColor("#321272")
			};
			try
			{
				await ctx.TriggerTypingAsync();
				if (targetRole == null)
					throw new ArgumentException($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —Ä–æ–ª—å [{ctx.Command.Arguments[1].Description}]");
				if (!ctx.Member.Roles.Contains(targetRole))
					throw new ArgumentException("–ò–∑–º–µ–Ω—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ä–æ–ª–∏");
				if (!colorCode.StartsWith('#') || colorCode.Length > 7)
					throw new ArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω –∫–æ–¥ —Ü–≤–µ—Ç–∞. –§–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π #FFFFFF");

				using (var db = new LiteDatabase($"filename={Bot.botConfig.GuildID}_voiceStat.db; journal=false;"))
				{
					var dbRoles = db.GetCollection<RoleModel>("Roles");
					dbRoles.EnsureIndex(x => x.Id);
					var dbRole = dbRoles.FindOne(x => x.Id == targetRole.Id);
					if (dbRole == null)
					{
						var roleModel = new RoleModel
						{
							Id = targetRole.Id,
							LastPaintUsedTime = null
						};
						dbRoles.Insert(roleModel);
						dbRole = dbRoles.FindOne(x => x.Id == targetRole.Id);
					}
					if (dbRole.LastPaintUsedTime != null && (dbRole.LastPaintUsedTime.Value.AddDays(14) - DateTimeOffset.UtcNow).TotalMinutes > 0)
						throw new ArgumentException($"–¶–≤–µ—Ç —Ä–æ–ª–∏ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ {(dbRole.LastPaintUsedTime.Value.AddDays(14) - DateTimeOffset.UtcNow).Days} –¥. {(dbRole.LastPaintUsedTime.Value.AddDays(14) - DateTimeOffset.UtcNow).Hours} —á. {(dbRole.LastPaintUsedTime.Value.AddDays(14) - DateTimeOffset.UtcNow).Minutes} –º–∏–Ω.\n"
							+ $"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª.-–≤–æ üé® –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π !me");
					var dbUsers = db.GetCollection<UserModel>("Users");
					var dbUser = dbUsers.FindOne(x => x.Id == ctx.User.Id);
					if (dbUser == null)
						throw new ArgumentException("–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ");
					if (dbUser.PaintCount == 0)
						throw new ArgumentException("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üé®");
					await ctx.Guild.UpdateRoleAsync(targetRole, color: new DiscordColor(colorCode));
					dbUser.PaintCount--;
					dbRole.LastPaintUsedTime = DateTimeOffset.UtcNow;
					dbRoles.Update(dbRole);
					dbUsers.Update(dbUser);
					embed.Description = $"{ctx.User.Mention} –¶–≤–µ—Ç —Ä–æ–ª–∏ {targetRole.Name} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω";
					await ctx.RespondAsync(embed: embed);
				}
			}
			catch (ArgumentException ex)
			{
				embed.Description = $"{ctx.Member.Mention} {ex.Message}";
				await ctx.RespondAsync(embed: embed);
			}
			catch (Exception ex)
			{
				Log.Error($"Exception occured: {ex.GetType()}: {ex.Message} {ex.StackTrace}");
			}
			return;
		}

		[Command("rolename"), Aliases("–∏–º—è—Ä–æ–ª–∏")]
		public async Task RoleNameAsync(CommandContext ctx, [Description("—Ü–µ–ª–µ–≤–∞—è —Ä–æ–ª—å")]DiscordRole targetRole = default, [Description("–Ω–æ–≤–æ–µ –∏–º—è —Ä–æ–ª–∏")]string roleName = default)
		{
			var embed = new DiscordEmbedBuilder
			{
				Author = new DiscordEmbedBuilder.EmbedAuthor
				{
					Name = "üéÅ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏"
				},
				Color = new DiscordColor("#321272")
			};
			try
			{
				await ctx.TriggerTypingAsync();
				if (targetRole == null)
					throw new ArgumentException($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç [{ctx.Command.Arguments[0].Description}]");
				if (string.IsNullOrEmpty(roleName))
					throw new ArgumentException($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç [{ctx.Command.Arguments[1].Description}]\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !—Ä–æ–ª—å @—Ä–æ–ª—å [–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ä–æ–ª–∏], —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π —Ä–æ–ª–∏");
				if (!ctx.Member.Roles.Contains(targetRole))
					throw new ArgumentException("–ò–∑–º–µ–Ω—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ä–æ–ª–∏");
				if (await NadekoDbExtension.GetCurrencyValue(ctx.User.Id) < 1800)
					throw new ArgumentException("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üîë. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ 1800 üîë");

				var oldRoleName = targetRole.Name;
				await ctx.Guild.UpdateRoleAsync(targetRole, name: roleName + "‚†Ä");
				await NadekoDbExtension.SetCurrencyValue(ctx.User.Id, -1800);
				embed.Description = $"{ctx.User.Mention} –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ {oldRoleName} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {roleName}";
				await ctx.RespondAsync(embed: embed);
			}
			catch (ArgumentException ex)
			{
				embed.Description = $"{ctx.Member.Mention} {ex.Message}";
				await ctx.RespondAsync(embed: embed);
			}
			catch (Exception ex)
			{
				Log.Error(ex.ToString());
			};
		}

		[Command("roletransfer"), Aliases("–ø–µ—Ä–µ–¥–∞—Ç—å—Ä–æ–ª—å")]
		public async Task RoleTransferAsync(CommandContext ctx, [Description("—Ü–µ–ª–µ–≤–∞—è —Ä–æ–ª—å")]DiscordRole targetRole = default, [Description("—Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")]DiscordMember targerUser = default)
		{
			var embed = new DiscordEmbedBuilder
			{
				Author = new DiscordEmbedBuilder.EmbedAuthor
				{
					Name = "üéÅ –ü–µ—Ä–µ–¥–∞—á–∞ —Ä–æ–ª–∏"
				},
				Color = new DiscordColor("#321272")
			};
			try
			{
				await ctx.TriggerTypingAsync();
				if (targetRole == null)
					throw new ArgumentException($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç [{ctx.Command.Arguments[0].Description}]");
				if (targerUser == null)
					throw new ArgumentException($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç [{ctx.Command.Arguments[1].Description}]\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !—Ä–æ–ª—å @—Ä–æ–ª—å @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –í–∞—à—É —Ä–æ–ª—å");
				if (!ctx.Member.Roles.Contains(targetRole))
					throw new ArgumentException("–ò–∑–º–µ–Ω—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ä–æ–ª–∏");
				if (await NadekoDbExtension.GetCurrencyValue(ctx.User.Id) < 1800)
					throw new ArgumentException("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üîë");

				await targerUser.GrantRoleAsync(targetRole);
				await ctx.Member.RevokeRoleAsync(targetRole);
				await NadekoDbExtension.SetCurrencyValue(ctx.User.Id, -1800);
				embed.Description = $"{ctx.User.Mention} –†–æ–ª—å {targetRole.Name} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–∞ {targerUser.Username}";
				await ctx.RespondAsync(embed: embed);
			}
			catch (ArgumentException ex)
			{
				embed.Description = $"{ctx.Member.Mention} {ex.Message}";
				await ctx.RespondAsync(embed: embed);
			}
			catch (Exception ex)
			{
				Log.Error(ex.ToString());
			};
		}

		[Command("sellrole"), Aliases("–ø—Ä–æ–¥–∞—Ç—å—Ä–æ–ª—å")]
		public async Task SellRole(CommandContext ctx, DiscordRole targetRole = default)
		{
			var embed = new DiscordEmbedBuilder
			{
				Author = new DiscordEmbedBuilder.EmbedAuthor
				{
					Name = "üéÅ –ü—Ä–æ–¥–∞–∂–∞ —Ä–æ–ª–∏"
				},
				Color = new DiscordColor("#321272")
			};
			try
			{
				await ctx.TriggerTypingAsync();
				if (targetRole == null)
					throw new ArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —Ä–æ–ª—å");
				if (!ctx.Member.Roles.ToHashSet().Contains(targetRole))
					throw new ArgumentException("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π —Ä–æ–ª–∏");
				if (ctx.Guild.Members.Where(x => !x.IsBot && x.Roles.ToHashSet().Contains(targetRole)).ToArray().Length > 1)
					throw new ArgumentException("–†–æ–ª—å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å, –µ—Å–ª–∏ –≤ –Ω–µ–π —Ç–æ–ª—å–∫–æ 1 —É—á–∞—Å—Ç–Ω–∏–∫");
				await ctx.Member.RevokeRoleAsync(targetRole);
				await NadekoDbExtension.SetCurrencyValue(ctx.User.Id, 4000);
				embed.Description = $"{ctx.User.Mention} –†–æ–ª—å {targetRole.Name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω–∞ –∑–∞ 4000 üîë";
				await ctx.RespondAsync(embed: embed);
			}
			catch (ArgumentException ex)
			{
				embed.Description = $"{ctx.Member.Mention} {ex.Message}";
				await ctx.RespondAsync(embed: embed);
			}
			catch (Exception ex)
			{
				Log.Error($"Exception occured: {ex.GetType()}: {ex.Message} {ex.StackTrace}");
			}
		}

		[Command("reset"), Hidden]
		public Task Reset(CommandContext ctx)
		{
			if (!ctx.Channel.IsPrivate) return Task.CompletedTask;
			try
			{
				var isParsed = ulong.TryParse(ctx.RawArgumentString, out ulong userId);
				if (!isParsed) return Task.CompletedTask;
				using (var db = new LiteDatabase($"filename={Bot.botConfig.GuildID}_voiceStat.db; journal=false;"))
				{
					var col = db.GetCollection<UserModel>("Users");
					var dbUser = col.FindOne(x => x.Id == userId);
					if (dbUser == null) return Task.CompletedTask;
					dbUser.IsConnected = false;
					dbUser.VoiceOnlineTime = TimeSpan.Zero;
					dbUser.LastSessionTime = null;
					dbUser.LastConnectedTime = null;
					col.Update(dbUser);
				}
			}
			catch (Exception ex)
			{
				Log.Error($"Exception occured: {ex.GetType()}: {ex.Message} {ex.StackTrace}");
			}
			return Task.CompletedTask;
		}

		[Command("dragontrigger"), Hidden]
		public Task DragonTrigger(CommandContext ctx)
		{
			if (ctx.User.Id != 149834096401448960) return Task.CompletedTask;
			Bot.nextDragonFly = DateTimeOffset.Now;
			return Task.CompletedTask;
		}

		[Command("dragontransfer"), Hidden]
		public Task DragonTransfer(CommandContext ctx, DiscordMember targetUser, uint value)
		{
			try
			{
				if (ctx.User.Id != 149834096401448960) return Task.CompletedTask;
				if (targetUser == null)
					throw new Exception("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
				using (var db = new LiteDatabase($"filename={Bot.botConfig.GuildID}_voiceStat.db; journal=false;"))
				{
					var col = db.GetCollection<UserModel>("Users");
					var dbUser = col.FindOne(x => x.Id == targetUser.Id);
					if (dbUser == null)
						throw new Exception($"{targetUser.Username} –Ω–µ –Ω–∞–π–¥–µ–Ω(–∞) –≤ –±–∞–∑–µ");
					dbUser.DragonCount += value;
					col.Update(dbUser);
				}
			}
			catch (Exception ex)
			{
				Log.Error(ex.ToString());
			}
			return Task.CompletedTask;
		}

		[Command("—Ç–æ–ø"), Aliases("top"), Cooldown(1, reset: 30, bucket_type: CooldownBucketType.Guild)]
		public async Task TopAsync(CommandContext ctx)
		{
			await ctx.TriggerTypingAsync();
			var embed = new DiscordEmbedBuilder
			{
				Author = new DiscordEmbedBuilder.EmbedAuthor
				{
					Name = "–õ–∏–¥–µ—Ä—ã –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–Ω–ª–∞–π–Ω–∞",
					Url = "http://194.67.207.194"
				},
				Color = new DiscordColor("#321272"),
				ThumbnailUrl = "https://media.discordapp.net/attachments/280945624084381698/399614111266373632/rank.png",

				Footer = new DiscordEmbedBuilder.EmbedFooter
				{
					Text = "–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ http://194.67.207.194",
				}
			};

			List<UserModel> positiveOnlineUsers;
			using (var db = new LiteDatabase($"filename={Bot.botConfig.GuildID}_voiceStat.db; journal=false;"))
			{
				var col = db.GetCollection<UserModel>("Users");
				positiveOnlineUsers = col.Find(x => x.VoiceOnlineTime != TimeSpan.Zero).OrderByDescending(x => x.VoiceOnlineTime).Take(10).ToList();
			}
			for (int i = 0; i < positiveOnlineUsers.Count; i++)
			{
				var place = $"{i + 1}–æ–µ –º–µ—Å—Ç–æ";
				var medal = ":medal:";
				if (i == 0)
					medal = ":first_place:";
				else if (i == 1)
					medal = ":second_place:";
				else if (i == 2)
					medal = ":third_place:";
				if (i == 3)
					place = $"{i + 1}–µ –º–µ—Å—Ç–æ";
				if (positiveOnlineUsers[i].Username.Length > 36)
					embed.AddField($"{medal} {place}", positiveOnlineUsers[i].Username.Substring(0, 36), true);
				else embed.AddField($"{medal} {place}", positiveOnlineUsers[i].Username, true);
				embed.AddField(":clock4:", $"{positiveOnlineUsers[i].VoiceOnlineTime.Hours + positiveOnlineUsers[i].VoiceOnlineTime.Days * 24} —á. {positiveOnlineUsers[i].VoiceOnlineTime.Minutes} –º–∏–Ω. {positiveOnlineUsers[i].VoiceOnlineTime.Seconds} —Å–µ–∫.", true);
			}
			await ctx.Client.SendMessageAsync(ctx.Channel, embed: embed);
		}

		[Command("–º–æ–π–æ–Ω–ª–∞–π–Ω"), Aliases("myonline")]
		public async Task MyOnlineAsync(CommandContext ctx)
		{
			await ctx.TriggerTypingAsync();
			UserModel dbUser = null;
			int dbUserIndex = -1;
			using (var db = new LiteDatabase($"filename={Bot.botConfig.GuildID}_voiceStat.db; journal=false;"))
			{
				var col = db.GetCollection<UserModel>("Users");
				var tempModel = col.FindAll().OrderByDescending(x => x.VoiceOnlineTime).Select((user, index) => new { user, index }).FirstOrDefault(x => x.user.Id == ctx.User.Id);
				if (tempModel != null)
				{
					dbUser = tempModel.user;
					dbUserIndex = tempModel.index;
				}
			}
			var embed = new DiscordEmbedBuilder
			{
				Author = new DiscordEmbedBuilder.EmbedAuthor
				{
					Name = $"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–Ω–ª–∞–π–Ω–∞",
					Url = "http://194.67.207.194"
				},
				Color = new DiscordColor("#321272"),
				ThumbnailUrl = ctx.User.AvatarUrl,

				Footer = new DiscordEmbedBuilder.EmbedFooter
				{
					Text = "–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ http://194.67.207.194",
				}
			};
			if (dbUser != null && dbUserIndex != -1)
			{
				var place = $"{dbUserIndex + 1} –º–µ—Å—Ç–æ";
				var medal = ":medal:";
				if (dbUserIndex == 0)
					medal = ":first_place:";
				else if (dbUserIndex == 1)
					medal = ":second_place:";
				else if (dbUserIndex == 2)
					medal = ":third_place:";
				if (dbUserIndex == 3)
					place = $"{dbUserIndex + 1}–µ –º–µ—Å—Ç–æ";
				if (dbUser.Username.Length > 36)
					embed.AddField($"{medal} {place}", dbUser.Username.Substring(0, 36), true);
				else embed.AddField($"{medal} {place}", dbUser.Username, true);
				embed.AddField(":clock4:", $"{dbUser.VoiceOnlineTime.Hours + dbUser.VoiceOnlineTime.Days * 24} —á. {dbUser.VoiceOnlineTime.Minutes} –º–∏–Ω. {dbUser.VoiceOnlineTime.Seconds} —Å–µ–∫.", true);
			}
			else
			{
				embed.Description = "–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ.";
			}
			await ctx.Client.SendMessageAsync(ctx.Channel, embed: embed);
		}

		[Command("—Ü–∏—Ç–∏—Ä–æ–≤–∞—Ç—å"), Aliases("quote")]
		public async Task QuoteAsync(CommandContext ctx)
		{
			if (ctx.Channel.IsPrivate)
				return;
			var arg = ctx.RawArgumentString?.Trim();
			if (string.IsNullOrEmpty(arg) || !ulong.TryParse(arg, out ulong id))
			{
				await ctx.RespondAsync("```–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !quote MessageID –¥–ª—è —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.```");
				return;
			}
			await ctx.Message.DeleteAsync();
			await ctx.TriggerTypingAsync();
			DiscordMessage quoteMessage = null;
			quoteMessage = await FindMessage(ctx, id);
			if (quoteMessage == null)
			{
				await ctx.RespondAsync("```–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID.```");
				return;
			}

			var embed = new DiscordEmbedBuilder
			{
				Author = new DiscordEmbedBuilder.EmbedAuthor
				{
					Name = quoteMessage.Author.Username,
					IconUrl = quoteMessage.Author.AvatarUrl
				},
				Description = quoteMessage.Content,
				Color = new DiscordColor("#329EFB")
			};
			await ctx.RespondAsync(embed: embed.Build());
		}

		[Command("givelikecheck")]
		public async Task GiveLikeCheck(CommandContext ctx)
		{
			if (ctx.Channel.IsPrivate || !Bot.botConfig.LikeCheckOwnersIds.Contains(ctx.User.Id))
				return;
			var embed = new DiscordEmbedBuilder
			{
				Author = new DiscordEmbedBuilder.EmbedAuthor
				{
					Name = $"–í—ã–¥–∞—á–∞ –ª–∞–π–∫–∞, –≥–∞–ª–∫–∏",
				},
				Color = new DiscordColor("#321272"),
			};

			var recipients = ctx.Message.MentionedUsers;
			if (recipients != null && recipients.Count > 1)
			{
				embed.Description = $"{ctx.User.Mention} –ù–µ–ª—å–∑—è —É–ø–æ–º–∏–Ω–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π";
				await ctx.RespondAsync(embed: embed);
				return;
			}
			var targetUser = recipients[0] as DiscordMember;
			DiscordRole targetRole = null;
			if (ctx.RawArgumentString != null && (ctx.RawArgumentString.Contains("–ª–∞–π–∫") || ctx.RawArgumentString.Contains("like")))
				targetRole = ctx.Guild.Roles.FirstOrDefault(x => x.Name == "üëç");
			else if (ctx.RawArgumentString != null && (ctx.RawArgumentString.Contains("–≥–∞–ª–æ—á–∫–∞") || ctx.RawArgumentString.Contains("–≥–∞–ª–∫–∞")))
				targetRole = ctx.Guild.Roles.FirstOrDefault(x => x.Name == "‚úî");
			else if (ctx.RawArgumentString != null && (ctx.RawArgumentString.Contains("–∂–µ–Ω")))
				targetRole = ctx.Guild.Roles.FirstOrDefault(x => x.Name == "‚ôÄ");
			else if (ctx.RawArgumentString != null && (ctx.RawArgumentString.Contains("–º—É–∂")))
				targetRole = ctx.Guild.Roles.FirstOrDefault(x => x.Name == "‚ôÇ");
			if (targetRole == null)
			{
				embed.Description = $"{ctx.User.Mention} –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —Ä–æ–ª—å.\n–ù—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å '–ª–∞–π–∫' –∏–ª–∏ 'like', –∏–ª–∏ '–≥–∞–ª–∫–∞', –∏–ª–∏ '–≥–∞–ª–æ—á–∫–∞'";
				await ctx.RespondAsync(embed: embed);
				return;
			}
			if (targetUser.Roles.Contains(targetRole))
			{
				// if (targetRole.Name == "‚úî")
				// {
				// 	embed.Description = $"{ctx.User.Mention} –†–æ–ª—å —É–∂–µ –µ—Å—Ç—å —É {targetUser.Mention}";
				// 	await ctx.RespondAsync(embed: embed);
				// 	return;
				// }
				embed.Description = $"{ctx.User.Mention} –†–æ–ª—å {targetRole.Name} —É–±—Ä–∞–Ω–∞ —É {targetUser.Mention}";
				await (targetUser as DiscordMember).RevokeRoleAsync(targetRole);
				await ctx.RespondAsync(embed: embed);
			}
			else
			{
				embed.Description = $"{ctx.User.Mention} –†–æ–ª—å –≤—ã–¥–∞–Ω–∞ {targetUser.Mention}";
				await (targetUser as DiscordMember).GrantRoleAsync(targetRole);
				await ctx.RespondAsync(embed: embed);
			}
		}

		[Command("marriage"), Aliases("—Å–≤–∞–¥—å–±–∞")]
		public async Task MarriageAsync(CommandContext ctx, [Description("—Ç–∏–ø —Å–≤–∞–¥—å–±—ã")]string marriageType = default, [Description("—Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")]DiscordMember targetUser = default)
		{
			var embed = new DiscordEmbedBuilder
			{
				Author = new DiscordEmbedBuilder.EmbedAuthor
				{
					Name = $"üíí –°–≤–∞–¥—å–±–∞",
				},
				Color = new DiscordColor("#321272"),
			};
			try
			{
				if (string.IsNullOrEmpty(marriageType))
					throw new ArgumentException($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç [{ctx.Command.Arguments[0].Description}].\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !—Å–≤–∞–¥—å–±–∞ [—Ö—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è/–∑–æ–ª–æ—Ç–∞—è/–±—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤–∞—è] @user");

				if (targetUser == null)
					throw new ArgumentException($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç [{ctx.Command.Arguments[1].Description}].\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !—Å–≤–∞–¥—å–±–∞ [—Ö—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è/–∑–æ–ª–æ—Ç–∞—è/–±—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤–∞—è] @user");
				using (var db = new LiteDatabase($"filename={Bot.botConfig.GuildID}_voiceStat.db; journal=false;"))
				{
					var col = db.GetCollection<UserModel>("Users");
					var dbUser = col.FindOne(x => x.Id == targetUser.Id);
					var sender = col.FindOne(x => x.Id == ctx.Member.Id);
					if (dbUser == null)
						throw new ArgumentException($"{targetUser.Username} –Ω–µ –Ω–∞–π–¥–µ–Ω(–∞) –≤ –±–∞–∑–µ");
					if (sender == null)
						throw new ArgumentException("–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ");
					if (sender.MarriageTime != null)
					{
						if ((sender.MarriageTime.Value - DateTimeOffset.Now).TotalSeconds > 0)
							throw new ArgumentException($"–£ –í–∞—Å —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å–≤–∞–¥—å–±–∞ —á–µ—Ä–µ–∑ {(sender.MarriageTime.Value - DateTimeOffset.Now).Hours} —á. {(sender.MarriageTime.Value - DateTimeOffset.Now).Minutes} –º–∏–Ω. {(sender.MarriageTime.Value - DateTimeOffset.Now).Seconds} —Å–µ–∫.");
						else
						{
							sender.MarriageTime = default;
							col.Update(sender);
							var partner = col.FindOne(x => x.Id == sender.PartnerId);
							if (partner != null)
							{
								partner.MarriageTime = default;
								col.Update(partner);
							}
						}
					}
					if (dbUser.MarriageTime != null)
					{
						if ((dbUser.MarriageTime.Value - DateTimeOffset.Now).TotalSeconds > 0)
							throw new ArgumentException($"–£ {targetUser.Username} —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å–≤–∞–¥—å–±–∞ —á–µ—Ä–µ–∑ {(dbUser.MarriageTime.Value - DateTimeOffset.Now).Hours} —á. {(dbUser.MarriageTime.Value - DateTimeOffset.Now).Minutes} –º–∏–Ω. {(sender.MarriageTime.Value - DateTimeOffset.Now).Seconds} —Å–µ–∫.");
						else
						{
							dbUser.MarriageTime = default;
							col.Update(dbUser);
							var partner = col.FindOne(x => x.Id == dbUser.PartnerId);
							if (partner != null)
							{
								partner.MarriageTime = default;
								col.Update(partner);
							}
						}
					}
					if (sender.PartnerId != 0)
						throw new ArgumentException("–í—ã —É–∂–µ –æ–±—Ä—É—á–µ–Ω—ã. –ß—Ç–æ–±—ã —Ä–∞–∑–≤–µ—Å—Ç–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É !—Ä–∞–∑–≤–µ—Å—Ç–∏—Å—å");
					if (dbUser.PartnerId != 0)
						throw new ArgumentException($"{targetUser.Username} —É–∂–µ –æ–±—Ä—É—á–µ–Ω(–∞).");
					var senderCurrency = await NadekoDbExtension.GetCurrencyValue(ctx.Member.Id);
					switch (marriageType)
					{
						case "—Ö—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è":
							if (sender.RingCount < 2 || sender.GiftCount < 60 || senderCurrency < 15000)
								throw new ArgumentException("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –•—Ä—É—Å—Ç–∞–ª—å–Ω—É—é —Å–≤–∞–¥—å–±—É –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
									+ "üíç x2\n"
									+ "üéÅ x60\n"
									+ "üîë x15000");
							sender.RingCount -= 2;
							sender.GiftCount -= 60;
							await NadekoDbExtension.SetCurrencyValue(ctx.Member.Id, -15000);
							sender.MarriageTime = DateTimeOffset.UtcNow.AddDays(7);
							dbUser.MarriageTime = DateTimeOffset.UtcNow.AddDays(7);
							break;
						case "–∑–æ–ª–æ—Ç–∞—è":
							if (sender.RingCount < 2 || sender.GiftCount < 120 || senderCurrency < 30000)
								throw new ArgumentException("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –ó–æ–ª–æ—Ç—É—é —Å–≤–∞–¥—å–±—É –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
									+ "üíç x2\n"
									+ "üéÅ x120\n"
									+ "üîë x30.000");
							sender.RingCount -= 2;
							sender.GiftCount -= 120;
							await NadekoDbExtension.SetCurrencyValue(ctx.Member.Id, -30000);
							sender.MarriageTime = DateTimeOffset.UtcNow.AddDays(7);
							dbUser.MarriageTime = DateTimeOffset.UtcNow.AddDays(7);
							break;
						case "–±—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤–∞—è":
							if (sender.RingCount < 2 || sender.GiftCount < 200 || senderCurrency < 50000)
								throw new ArgumentException("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –ë—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤—É—é —Å–≤–∞–¥—å–±—É –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
									+ "üíç x2\n"
									+ "üéÅ x200\n"
									+ "üîë x50.000");
							sender.RingCount -= 2;
							sender.GiftCount -= 200;
							await NadekoDbExtension.SetCurrencyValue(ctx.Member.Id, -50000);
							sender.MarriageTime = DateTimeOffset.UtcNow.AddDays(7);
							dbUser.MarriageTime = DateTimeOffset.UtcNow.AddDays(7);
							break;
						default:
							throw new ArgumentException($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç {ctx.Command.Arguments[0].Description}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !—Å–≤–∞–¥—å–±–∞ [—Ö—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è/–∑–æ–ª–æ—Ç–∞—è/–±—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤–∞—è] @user");
					}
					sender.PartnerId = targetUser.Id;
					dbUser.PartnerId = ctx.Member.Id;
					col.Update(dbUser);
					col.Update(sender);
				}
				embed.Description = $"{ctx.Member.Mention} {targetUser.Mention} –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —É –≤–∞—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ {marriageType} —Å–≤–∞–¥—å–±–∞ –Ω–∞ {DateTime.UtcNow.AddDays(7).ToShortDateString()} {DateTime.UtcNow.AddDays(7).ToShortTimeString()} (–ú–°–ö)";
				await ctx.RespondAsync(embed: embed);
			}
			catch (ArgumentException ex)
			{
				embed.Description = $"{ctx.Member.Mention} {ex.Message}";
				await ctx.RespondAsync(embed: embed);
			}
			catch (Exception ex)
			{
				Log.Error(ex.ToString());
			}
		}

		[Command("divorce"), Aliases("—Ä–∞–∑–≤–æ–¥")]
		public async Task DivorceAsync(CommandContext ctx)
		{
			var embed = new DiscordEmbedBuilder
			{
				Author = new DiscordEmbedBuilder.EmbedAuthor
				{
					Name = $"üíí –†–∞–∑–≤–æ–¥",
				},
				Color = new DiscordColor("#321272"),
			};
			try
			{
				using (var db = new LiteDatabase($"filename={Bot.botConfig.GuildID}_voiceStat.db; journal=false;"))
				{
					var col = db.GetCollection<UserModel>("Users");
					var dbUser = col.FindOne(x => x.Id == ctx.Member.Id);
					if (dbUser == null)
						throw new ArgumentException("–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ");
					if (dbUser.PartnerId == 0)
						throw new ArgumentException("–í—ã –Ω–∏ —Å –∫–µ–º –Ω–µ –æ–±—Ä—É—á–µ–Ω—ã");
					if (await NadekoDbExtension.GetCurrencyValue(ctx.Member.Id) < 3000)
						throw new ArgumentException("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üîë. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ 3000 üîë");
					dbUser.MarriageTime = default;
					var partnerDbUser = col.FindOne(x => x.Id == dbUser.PartnerId);
					if (partnerDbUser == null)
						throw new ArgumentException("–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ");
					dbUser.PartnerId = default;
					partnerDbUser.MarriageTime = default;
					partnerDbUser.PartnerId = default;
					await NadekoDbExtension.SetCurrencyValue(ctx.Member.Id, -3000);
					col.Update(dbUser);
					col.Update(partnerDbUser);
				}
				embed.Description = $"{ctx.Member.Mention} –í—ã —Ä–∞–∑–æ—Ä–≤–∞–ª–∏ –±—Ä–∞—á–Ω—ã–µ —É–∑—ã —Å –í–∞—à–∏–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º";
				await ctx.RespondAsync(embed: embed);
			}
			catch (ArgumentException ex)
			{
				embed.Description = $"{ctx.Member.Mention} {ex.Message}";
				await ctx.RespondAsync(embed: embed);
			}
			catch (Exception ex)
			{
				Log.Error(ex.ToString());
			}
		}

		[Command("kill"), Aliases("—É–±–∏—Ç—å")]
		public async Task KillAsync(CommandContext ctx, DiscordMember targetUser = default)
		{
			var embed = new DiscordEmbedBuilder
			{
				Author = new DiscordEmbedBuilder.EmbedAuthor
				{
					Name = $"üî´ –ü–æ–∫—É—à–µ–Ω–∏–µ",
				},
				Color = new DiscordColor("#321272"),
			};
			try
			{
				await ctx.TriggerTypingAsync();
				if (targetUser == null)
					throw new ArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç");
				using (var db = new LiteDatabase($"filename={Bot.botConfig.GuildID}_voiceStat.db; journal=false;"))
				{
					var col = db.GetCollection<UserModel>("Users");
					var dbUser = col.FindOne(x => x.Id == ctx.Member.Id);
					if (dbUser == null)
						throw new ArgumentException("–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ");
					if (dbUser.PistolCount == 0)
						throw new ArgumentException("–î–ª—è –ø–æ–∫—É—à–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ö–æ—Ç—è –±—ã 1 üî´");
					if (dbUser.AmmoCount < 10)
						throw new ArgumentException($"–î–ª—è –ø–æ–∫—É—à–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 10 {DiscordEmoji.FromName(ctx.Client, ":bullet:")}");
					var targetDbUser = col.FindOne(x => x.Id == targetUser.Id);
					if (targetDbUser == null)
						throw new ArgumentException($"{targetUser.Username} –Ω–µ –Ω–∞–π–¥–µ–Ω(–∞) –≤ –±–∞–∑–µ");
					if (targetDbUser.LastAssassinatedTime != null && (targetDbUser.LastAssassinatedTime.Value.AddHours(1) - DateTimeOffset.UtcNow).TotalSeconds > 1)
						throw new ArgumentException($"–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–∫—É—à–µ–Ω–∏–µ –Ω–∞ {targetUser.Mention} –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ {(targetDbUser.LastAssassinatedTime.Value.AddHours(1) - DateTimeOffset.UtcNow).Hours} —á. {(targetDbUser.LastAssassinatedTime.Value.AddHours(1) - DateTimeOffset.UtcNow).Minutes} –º–∏–Ω. {(targetDbUser.LastAssassinatedTime.Value.AddHours(1) - DateTimeOffset.UtcNow).Seconds} —Å–µ–∫.");
					if (targetDbUser.SmallShieldEndTime != null && (targetDbUser.SmallShieldEndTime.Value - DateTimeOffset.UtcNow).TotalSeconds > 1)
						throw new ArgumentException($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {targetUser.Mention} –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞—â–∏—â–µ–Ω –æ—Ç –ø–æ–∫—É—à–µ–Ω–∏—è –º–∞–ª—ã–º —â–∏—Ç–æ–º.\n"
						+ $"–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —â–∏—Ç–∞ {(targetDbUser.SmallShieldEndTime.Value - DateTimeOffset.UtcNow).Days} –¥. {(targetDbUser.SmallShieldEndTime.Value - DateTimeOffset.UtcNow).Hours} —á. {(targetDbUser.SmallShieldEndTime.Value - DateTimeOffset.UtcNow).Minutes} –º–∏–Ω.");
					targetDbUser.SmallShieldEndTime = null;
					var bulletsCost = Bot.random.Next(5, 10);
					dbUser.AmmoCount -= (uint)bulletsCost;
					col.Update(dbUser);
					if (targetDbUser.SuperShieldEndurance > 0)
					{
						targetDbUser.LastAssassinatedTime = DateTimeOffset.UtcNow;
						targetDbUser.SuperShieldEndurance--;
						col.Update(targetDbUser);
						throw new ArgumentException($"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {bulletsCost} {DiscordEmoji.FromName(ctx.Client, ":bullet:")} –¥–ª—è –Ω–∞–ø–∞–¥–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {targetUser.Mention}.\n–ù–æ –ë–æ–µ–≤–æ–π —â–∏—Ç –∑–∞—â–∏—Ç–∏–ª –µ–≥–æ –æ—Ç –∞—Ç–∞–∫–∏.\n"
						+ $"–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –ë–æ–µ–≤–æ–µ–≥–æ —â–∏—Ç–∞: {targetDbUser.SuperShieldEndurance}");
					}
					var waifuCostDecresePer = Bot.random.Next(2, 10) / 100f;
					await NadekoDbExtension.SetWaifuCostValue(targetUser.Id, 1 - waifuCostDecresePer);
					targetDbUser.LastAssassinatedTime = DateTimeOffset.UtcNow;
					col.Update(targetDbUser);
					var chance = Bot.random.Next(0, 100);
					if (chance < 15)
					{
						dbUser.PistolCount--;
						col.Update(dbUser);
						chance = Bot.random.Next(0, 100);
						if (chance < 60 && targetDbUser.DragonCount > 0)
						{
							targetDbUser.DragonCount--;
							col.Update(targetDbUser);
							dbUser.DragonEggCount++;
							col.Update(dbUser);
							throw new ArgumentException($"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {bulletsCost} {DiscordEmoji.FromName(ctx.Client, ":bullet:")} –¥–ª—è –Ω–∞–ø–∞–¥–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {targetUser.Mention}.\n–£ –í–∞—Å —Å–ª–æ–º–∞–ª—Å—è 1 üî´, –Ω–æ –í—ã —É–±–∏–ª–∏ –¥—Ä–∞–∫–æ–Ω–∞ –∏ –ø–æ–ª—É—á–∏–ª–∏ 1 ü•ö –∏ —Å–±—Ä–æ—Å–∏–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å {targetUser.Mention} –Ω–∞ {waifuCostDecresePer * 100}%");
						}
						throw new ArgumentException($"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {bulletsCost} {DiscordEmoji.FromName(ctx.Client, ":bullet:")} –¥–ª—è –Ω–∞–ø–∞–¥–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {targetUser.Mention}.\n–£ –í–∞—Å —Å–ª–æ–º–∞–ª—Å—è 1 üî´, –Ω–æ –í—ã —Å–±—Ä–æ—Å–∏–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å {targetUser.Mention} –Ω–∞ {waifuCostDecresePer * 100}%");
					}
					chance = Bot.random.Next(0, 100);
					if (chance < 10 && targetDbUser.DragonCount > 0)
					{
						targetDbUser.DragonCount--;
						col.Update(targetDbUser);
						dbUser.DragonEggCount++;
						col.Update(dbUser);
						throw new ArgumentException($"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {bulletsCost} {DiscordEmoji.FromName(ctx.Client, ":bullet:")} –¥–ª—è –Ω–∞–ø–∞–¥–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {targetUser.Mention}.\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 ü•ö, —É–±–∏–≤ –¥—Ä–∞–∫–æ–Ω–∞ –∏ —Å–±—Ä–æ—Å–∏–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å {targetUser.Mention} –Ω–∞ {waifuCostDecresePer * 100}%");
					}
					embed.Description = $"{ctx.Member.Mention} –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {bulletsCost} {DiscordEmoji.FromName(ctx.Client, ":bullet:")} –¥–ª—è –Ω–∞–ø–∞–¥–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {targetUser.Mention}.\n–í—ã —Å–±—Ä–æ—Å–∏–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å {targetUser.Mention} –Ω–∞ {waifuCostDecresePer * 100}%";
					await ctx.RespondAsync(embed: embed);
				}
			}
			catch (ArgumentException ex)
			{
				embed.Description = $"{ctx.Member.Mention} {ex.Message}";
				await ctx.RespondAsync(embed: embed);
			}
			catch (Exception ex)
			{
				Log.Error(ex.ToString());
			}
		}

		[Command("shop"), Aliases("–º–∞–≥–∞–∑–∏–Ω")]
		public async Task ShopAsync(CommandContext ctx)
		{
			try
			{
				await ctx.TriggerTypingAsync();
				var embed = new DiscordEmbedBuilder
				{
					Author = new DiscordEmbedBuilder.EmbedAuthor
					{
						Name = "üõí –ú–∞–≥–∞–∑–∏–Ω"
					},
					Color = new DiscordColor("#321272")
				};
				embed.AddField($"{DiscordEmoji.FromName(ctx.Client, ":bullet:")} –ü–∞—Ç—Ä–æ–Ω", "100", true);
				embed.AddField("üéÅ –ü–∞–∫", "150", true);
				embed.AddField("üõ° –ú–∞–ª—ã–π —â–∏—Ç (1 –¥.)", "1000", true);
				embed.AddField("üõ° –ë–æ–µ–≤–æ–π —â–∏—Ç (3-4 –ø—Ä–æ—á.)", "2000", true);
				embed.AddField("üé® –ö—Ä–∞—Å–∫–∞", "1500", true);
				embed.AddField("ü•ö –Ø–π—Ü–æ", "6000", true);
				embed.AddField("üíç –ö–æ–ª—å—Ü–æ", "8000", true);
				embed.AddField("üî´ –ü–∏—Å—Ç–æ–ª–µ—Ç", "9000", true);
				embed.AddField($"{DiscordEmoji.FromName(ctx.Client, ":incubator:")} –ò–Ω–∫—É–±–∞—Ç–æ—Ä", "15000", true);
				await ctx.RespondAsync(embed: embed);
			}
			catch (Exception ex)
			{
				Log.Error(ex.ToString());
			}
			return;
		}

		[Command("buy"), Aliases("–∫—É–ø–∏—Ç—å")]
		public async Task BuyAsync(CommandContext ctx, uint value = 1, [Description("–∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞")]string item = default)
		{
			var embed = new DiscordEmbedBuilder
			{
				Author = new DiscordEmbedBuilder.EmbedAuthor
				{
					Name = "üõí –ü–æ–∫—É–ø–∫–∞"
				},
				Color = new DiscordColor("#321272")
			};
			try
			{
				await ctx.TriggerTypingAsync();
				if (string.IsNullOrEmpty(item))
					throw new ArgumentException($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç [{ctx.Command.Arguments[1].Description}]");
				using (var db = new LiteDatabase($"filename={Bot.botConfig.GuildID}_voiceStat.db; journal=false;"))
				{
					var col = db.GetCollection<UserModel>("Users");
					var dbUser = col.FindOne(x => x.Id == ctx.Member.Id);
					if (dbUser == null)
						throw new ArgumentException("–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ");
					var keys = await NadekoDbExtension.GetCurrencyValue(ctx.User.Id);
					int price = default;
					DiscordEmoji itemEmoji = default;
					switch (item.ToLower())
					{
						case "–ø–∞—Ç—Ä–æ–Ω":
							if (keys < 100 * (int)value)
								throw new ArgumentException("–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üîë");
							dbUser.AmmoCount += value; ;
							price = 100 * (int)value;
							itemEmoji = DiscordEmoji.FromName(ctx.Client, ":bullet:");
							break;
						case "–ø–∞–∫":
							if (keys < 150 * (int)value)
								throw new ArgumentException("–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üîë");
							dbUser.GiftCount += value; ;
							price = 150 * (int)value;
							itemEmoji = DiscordEmoji.FromName(ctx.Client, ":gift:");
							break;
						case "–º–∞–ª—ã–π—â–∏—Ç":
							if (keys < 1000 * (int)value)
								throw new ArgumentException("–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üîë");
							dbUser.SmallShieldEndTime = dbUser.SmallShieldEndTime == null ? DateTimeOffset.UtcNow.AddDays(value) : dbUser.SmallShieldEndTime.Value.AddDays(value);
							price = 1000 * (int)value;
							itemEmoji = DiscordEmoji.FromName(ctx.Client, ":shield:");
							break;
						case "–±–æ–µ–≤–æ–π—â–∏—Ç":
							if (keys < 2000 * (int)value)
								throw new ArgumentException("–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üîë");
							var endurance = Bot.random.Next(3, 4);
							dbUser.SuperShieldEndurance += (uint)(endurance * value);
							price = 2000 * (int)value;
							itemEmoji = DiscordEmoji.FromName(ctx.Client, ":shield:");
							break;
						case "–∫—Ä–∞—Å–∫–∞":
							if (keys < 1500 * (int)value)
								throw new ArgumentException("–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üîë");
							dbUser.PaintCount += value;
							price = 1500 * (int)value;
							itemEmoji = DiscordEmoji.FromName(ctx.Client, ":art:");
							break;
						case "—è–π—Ü–æ":
							if (keys < 6000 * (int)value)
								throw new ArgumentException("–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üîë");
							dbUser.DragonEggCount += value;
							if (dbUser.EggRespawnTimes == null)
								dbUser.EggRespawnTimes = new List<DateTimeOffset>();
							for (int i = 0; i < value; i++)
							{
								dbUser.EggRespawnTimes.Add(DateTimeOffset.UtcNow.AddHours(18));
							}
							price = 6000 * (int)value;
							itemEmoji = DiscordEmoji.FromName(ctx.Client, ":egg:");
							break;
						case "–∫–æ–ª—å—Ü–æ":
							if (keys < 8000 * (int)value)
								throw new ArgumentException("–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üîë");
							dbUser.RingCount += value;
							price = 8000 * (int)value;
							itemEmoji = DiscordEmoji.FromName(ctx.Client, ":ring:");
							break;
						case "–ø–∏—Å—Ç–æ–ª–µ—Ç":
							if (keys < 9000 * (int)value)
								throw new ArgumentException("–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üîë");
							dbUser.PistolCount += value;
							price = 9000 * (int)value;
							itemEmoji = DiscordEmoji.FromName(ctx.Client, ":gun:");
							break;
						case "–∏–Ω–∫—É–±–∞—Ç–æ—Ä":
							if (keys < 15000 * (int)value)
								throw new ArgumentException("–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üîë");
							dbUser.IncubatorCount += value;
							if (dbUser.IncubatorRespawnTimes == null)
								dbUser.IncubatorRespawnTimes = new List<DateTimeOffset>();
							for (int i = 0; i < value; i++)
							{
								dbUser.IncubatorRespawnTimes.Add(DateTimeOffset.UtcNow.AddHours(18));
							}
							price = 15000 * (int)value;
							itemEmoji = DiscordEmoji.FromName(ctx.Client, ":incubator:");
							break;
						default:
							embed.Description = $"{ctx.Member.Mention} –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ";
							await ctx.RespondAsync(embed: embed);
							return;
					}
					col.Update(dbUser);
					await NadekoDbExtension.SetCurrencyValue(ctx.Member.Id, -price);
					embed.Description = $"{ctx.Member.Mention} –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {value} {itemEmoji}";
				}
				await ctx.RespondAsync(embed: embed);
			}
			catch (ArgumentException ex)
			{
				embed.Description = $"{ctx.Member.Mention} {ex.Message}";
				await ctx.RespondAsync(embed: embed);
			}
			catch (Exception ex)
			{
				Log.Error(ex.ToString());
			}
		}

		private async Task<DiscordMessage> FindMessage(CommandContext ctx, ulong id)
		{
			DiscordMessage quoteMessage = null;
			var guildChannels = ctx.Guild.Channels;
			for (int i = -1; i < guildChannels.Count; i++)
			{
				try
				{
					if (i == -1)
						quoteMessage = await ctx.Channel.GetMessageAsync(id);
					else quoteMessage = await guildChannels[i].GetMessageAsync(id);
					return quoteMessage;
				}
				catch
				{
					continue;
				}
			}
			return quoteMessage;
		}
	}
}